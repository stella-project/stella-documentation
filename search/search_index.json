{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to STELLA's documentation! Guides Setup guide (single server instance) API Reference Micro-service Multi-container application Central server Developer Information Environment variables Multi-container application Central server","title":"Home"},{"location":"#welcome-to-stellas-documentation","text":"","title":"Welcome to STELLA's documentation!"},{"location":"#guides","text":"Setup guide (single server instance)","title":"Guides"},{"location":"#api-reference","text":"Micro-service Multi-container application Central server","title":"API Reference"},{"location":"#developer-information","text":"","title":"Developer Information"},{"location":"#environment-variables","text":"Multi-container application Central server","title":"Environment variables"},{"location":"about/","text":"STELLA (Infra ST rucutr E s for L iving LA bs) offers an Evaluation-as-a-Service platform for living lab experiments with ranking and recommender systems. By using STELLA, researchers can evaluate their experimental systems based on user feedback which stands in contrast to (or complements) the Cranfield-style approaches with test collections in offline evaluations. STELLA facilitates conventional AB tests but also more data-efficient interleaving experiments in which results lists of two ranking or recommender functions are mixed. A fundamental component of STELLA is the integration of experimental systems as micro-services. While previous living labs restricted the system results to the most popular top-k queries, we allow more comprehensive evaluations by integrating micro-services with entire retrieval and recommender systems. The Living Labs for Academic Search (LiLAS) lab at CLEF made use of the STELLA infrastructure and served as the first test-bed to evaluate the feasibility of our new infrastructure design. We welcome contributions and look for collaborations with researchers and sites alike.","title":"About"},{"location":"api-reference/mca/","text":"Ranking REST endpoint: GET /stella/api/v1/ranking?query=<string:query>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container> Explanation: query : the query string page : the number of the start page (optional) rpp : the number of results per page (optional) container : name of the container that contains either the baseline or one of the experimental systems (optional) sid : the session identifier (optional) Output (interleaved ranking): {'body': {'1': {'docid': 'M27622217', 'type': 'BASE'}, '2': {'docid': 'M27251231', 'type': 'EXP'}, '3': {'docid': 'M27692969', 'type': 'BASE'}, '4': {'docid': 'M26350569', 'type': 'EXP'}, '5': {'docid': 'M26715777', 'type': 'EXP'}, '6': {'docid': 'M26650940', 'type': 'BASE'}, '7': {'docid': 'M27098271', 'type': 'EXP'}, '8': {'docid': 'M28381438', 'type': 'BASE'}, '9': {'docid': 'M27763523', 'type': 'EXP'}, '10': {'docid': 'M27157745', 'type': 'BASE'}, '11': {'docid': 'M28066266', 'type': 'EXP'}, '12': {'docid': 'M26874427', 'type': 'BASE'}, '13': {'docid': 'M27133457', 'type': 'EXP'}, '14': {'docid': 'M26791355', 'type': 'BASE'}, '15': {'docid': 'M27157753', 'type': 'BASE'}, '16': {'docid': 'M27167258', 'type': 'EXP'}, '17': {'docid': 'M27524068', 'type': 'EXP'}, '18': {'docid': 'M26824628', 'type': 'BASE'}, '19': {'docid': 'M26967532', 'type': 'EXP'}}, 'header': {'container': {'base': 'rank_elastic_base', 'exp': 'rank_elastic'}, 'page': 0, 'q': 'vaccine', 'rid': 3, 'rpp': 20, 'hits': 12312, 'sid': 1}} Explanation: header : header containing meta information about the returned result body : body with rank positions, identifiers, and type of the corresponding system docid : the document identifier type : type of system can be either BASE or EXP container : dictionary with names of the experimental system and optional baseline system page : the number of the start page q : the query string rid : the ranking identifier rpp : the number of results per page hits : the number of total hits sid : the session identifier Output (non-interleaved ranking): {'body': {'1': {'docid': 'M27622217', 'type': 'EXP'}, '2': {'docid': 'M27251231', 'type': 'EXP'}, '3': {'docid': 'M27692969', 'type': 'EXP'}, '4': {'docid': 'M26350569', 'type': 'EXP'}, '5': {'docid': 'M26715777', 'type': 'EXP'}, '6': {'docid': 'M26650940', 'type': 'EXP'}, '7': {'docid': 'M27098271', 'type': 'EXP'}, '8': {'docid': 'M28381438', 'type': 'EXP'}, '9': {'docid': 'M27763523', 'type': 'EXP'}, '10': {'docid': 'M27157745', 'type': 'EXP'}, '11': {'docid': 'M28066266', 'type': 'EXP'}, '12': {'docid': 'M26874427', 'type': 'EXP'}, '13': {'docid': 'M27133457', 'type': 'EXP'}, '14': {'docid': 'M26791355', 'type': 'EXP'}, '15': {'docid': 'M27157753', 'type': 'EXP'}, '16': {'docid': 'M27167258', 'type': 'EXP'}, '17': {'docid': 'M27524068', 'type': 'EXP'}, '18': {'docid': 'M26824628', 'type': 'EXP'}, '19': {'docid': 'M26967532', 'type': 'EXP'}}, 'header': {'container': {'exp': 'rank_elastic'}, 'page': 0, 'q': 'vaccine', 'rid': 1, 'rpp': 20, 'hits': 12312, 'sid': 1}} Explanation: See above. Feedback REST endpoint: POST /stella/api/v1/ranking/rid=<int:rid>/feedback Explanation: sid : the session identifier rid : the ranking identifier Payload: {'clicks': {'1': {'clicked': False, 'date': None, 'docid': 'M26923455', 'type': 'EXP'}, '2': {'clicked': False, 'date': None, 'docid': 'M25600519', 'type': 'EXP'}, '3': {'clicked': True, 'date': '2020-07-29 16:06:51', 'docid': 'M27515393', 'type': 'EXP'}, '4': {'clicked': False, 'date': None, 'docid': 'M27572122', 'type': 'EXP'}, '5': {'clicked': False, 'date': None, 'docid': 'M27357208', 'type': 'EXP'}, '6': {'clicked': True, 'date': '2020-07-29 16:06:51', 'docid': 'M27309042', 'type': 'EXP'}, '7': {'clicked': False, 'date': None, 'docid': 'M27237391', 'type': 'EXP'}, '8': {'clicked': False, 'date': None, 'docid': 'M27279275', 'type': 'EXP'}, '9': {'clicked': False, 'date': None, 'docid': 'M26813237', 'type': 'EXP'} '10': {'clicked': False, 'date': None, 'docid': 'M27049797', 'type': 'EXP'}, '11': {'clicked': False, 'date': None, 'docid': 'M27531820', 'type': 'EXP'}, '12': {'clicked': False, 'date': None, 'docid': 'M27338346', 'type': 'EXP'}, '13': {'clicked': False, 'date': None, 'docid': 'M27999240', 'type': 'EXP'}, '14': {'clicked': False, 'date': None, 'docid': 'M26613600', 'type': 'EXP'}, '15': {'clicked': False, 'date': None, 'docid': 'M27356552', 'type': 'EXP'}, '16': {'clicked': False, 'date': None, 'docid': 'M27783754', 'type': 'EXP'}, '17': {'clicked': False, 'date': None, 'docid': 'M27278100', 'type': 'EXP'}, '18': {'clicked': False, 'date': None, 'docid': 'M27531823', 'type': 'EXP'}, '19': {'clicked': False, 'date': None, 'docid': 'M26860287', 'type': 'EXP'}}, 'end': '2020-07-29 16:12:53', 'interleave': True, 'start': '2020-07-29 16:06:51'} Explanation: start : time of session start, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' interleave : boolean value indicating if the result list has been interleaved end : time of session end, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' clicks : dicitionary containing document identifiers and their corresponding clicks clicked : boolean values indicating whether document has been clicked or not date : time when click happend, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' docid : the document identifier system : string value indicating if the corresponding system is baseline ( BASE ) or experimental ( EXP ) Recommendations REST endpoint: Datasets GET /stella/api/v1/recommendation/datasets?itemid=<string:itemid>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container> Explanation: itemid : the target item of the recommendations page : the number of the start page (optional) rpp : the number of results per page (optional) sid : the session identifier (optional) container : name of the container that contains either the baseline or one of the experimental systems (optional) Publications GET /stella/api/v1/recommendation/publications?itemid=<string:itemid>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container> Explanation: See above. Output (interleaved recommendation): {'body': {'1': {'docid': 'M27388739', 'type': 'BASE'}, '2': {'docid': 'M27338344', 'type': 'EXP'}, '3': {'docid': 'M26207529', 'type': 'EXP'}, '4': {'docid': 'M27216378', 'type': 'BASE'}, '5': {'docid': 'M26938486', 'type': 'BASE'}, '6': {'docid': 'M26612070', 'type': 'EXP'}, '7': {'docid': 'M27641359', 'type': 'BASE'}, '8': {'docid': 'M27567522', 'type': 'EXP'}, '9': {'docid': 'M27897418', 'type': 'BASE'}}, 'header': {'container': {'base': 'recom_tfidf_base', 'exp': 'recom_tfidf'}, 'itemid': 'M26923455', 'page': 0, 'rid': 4, 'rpp': 10, 'sid': 2, 'type': 'PUB'}} Explanation: header : header containing meta information about the returned result body : body with positions, identifiers, and type of the corresponding system docid : the document identifier type : type of system can be either BASE or EXP container : dictionary with names of the experimental system and optional baseline system itemid : the target item of the recommendations page : the number of the start page rid : the recommendation identifier rpp : the number of results per page sid : the session identifier type : type of system can be either BASE or EXP Output (non-interleaved recommendation): {'body': {'1': {'docid': 'M27038470', 'type': 'EXP'}, '2': {'docid': 'M27342969', 'type': 'EXP'}, '3': {'docid': 'M26774951', 'type': 'EXP'}, '4': {'docid': 'M27912945', 'type': 'EXP'}, '5': {'docid': 'M26797943', 'type': 'EXP'}, '6': {'docid': 'M25359468', 'type': 'EXP'}, '7': {'docid': 'M26969740', 'type': 'EXP'}, '8': {'docid': 'M27613427', 'type': 'EXP'}, '9': {'docid': 'M27976545', 'type': 'EXP'}}, 'header': {'container': {'exp': 'recom_tfidf'}, 'itemid': 'M26923455', 'page': 0, 'rid': 2, 'rpp': 10, 'sid': 2, 'type': 'PUB'}} Explanation: See above. Feedback REST endpoint: POST /stella/api/v1/recommendation/rid=rid=<int:rid>/feedback Explanation: rid : the recommendation identifier {'clicks': {'1': {'clicked': False, 'date': None, 'docid': 'M27160449', 'type': 'EXP'}, '2': {'clicked': False, 'date': None, 'docid': 'M27888935', 'type': 'BASE'}, '3': {'clicked': False, 'date': None, 'docid': 'M27088628', 'type': 'EXP'}, '4': {'clicked': False, 'date': None, 'docid': 'M27064543', 'type': 'BASE'}, '5': {'clicked': False, 'date': None, 'docid': 'M27717979', 'type': 'EXP'}, '6': {'clicked': True, 'date': '2020-07-29 17:11:18', 'docid': 'M27077760', 'type': 'BASE'}, '7': {'clicked': False, 'date': None, 'docid': 'M27638054', 'type': 'BASE'}, '8': {'clicked': False, 'date': None, 'docid': 'M26360828', 'type': 'EXP'}, '9': {'clicked': False, 'date': None, 'docid': 'M27554937', 'type': 'BASE'}}, 'end': '2020-07-29 17:59:24', 'interleave': True, 'start': '2020-07-29 17:11:18'} Explanation: start : time of session start, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' interleave : boolean value indicating if the result list has been interleaved end : time of session end, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' clicks : dicitionary containing document identifiers and their corresponding clicks clicked : boolean values indicating whether document has been clicked or not date : time when click happend, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' docid : the document identifier system : string value indicating if the corresponding system is baseline ( BASE ) or experimental ( EXP ) Indexing GET /stella/api/v1/index/bulk Explanation: Start indexing all containers in parallel. GET /stella/api/v1/index/<string:container_name> Explanation: container_name : Name of the specific container to be indexed. Exit sessions GET /stella/api/v1/sessions/<int:sid>/exit Explanation: sid : Identifier of the session to be exited.","title":"Multi-container application"},{"location":"api-reference/mca/#ranking","text":"","title":"Ranking"},{"location":"api-reference/mca/#rest-endpoint","text":"GET /stella/api/v1/ranking?query=<string:query>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container>","title":"REST endpoint:"},{"location":"api-reference/mca/#explanation","text":"query : the query string page : the number of the start page (optional) rpp : the number of results per page (optional) container : name of the container that contains either the baseline or one of the experimental systems (optional) sid : the session identifier (optional)","title":"Explanation:"},{"location":"api-reference/mca/#output-interleaved-ranking","text":"{'body': {'1': {'docid': 'M27622217', 'type': 'BASE'}, '2': {'docid': 'M27251231', 'type': 'EXP'}, '3': {'docid': 'M27692969', 'type': 'BASE'}, '4': {'docid': 'M26350569', 'type': 'EXP'}, '5': {'docid': 'M26715777', 'type': 'EXP'}, '6': {'docid': 'M26650940', 'type': 'BASE'}, '7': {'docid': 'M27098271', 'type': 'EXP'}, '8': {'docid': 'M28381438', 'type': 'BASE'}, '9': {'docid': 'M27763523', 'type': 'EXP'}, '10': {'docid': 'M27157745', 'type': 'BASE'}, '11': {'docid': 'M28066266', 'type': 'EXP'}, '12': {'docid': 'M26874427', 'type': 'BASE'}, '13': {'docid': 'M27133457', 'type': 'EXP'}, '14': {'docid': 'M26791355', 'type': 'BASE'}, '15': {'docid': 'M27157753', 'type': 'BASE'}, '16': {'docid': 'M27167258', 'type': 'EXP'}, '17': {'docid': 'M27524068', 'type': 'EXP'}, '18': {'docid': 'M26824628', 'type': 'BASE'}, '19': {'docid': 'M26967532', 'type': 'EXP'}}, 'header': {'container': {'base': 'rank_elastic_base', 'exp': 'rank_elastic'}, 'page': 0, 'q': 'vaccine', 'rid': 3, 'rpp': 20, 'hits': 12312, 'sid': 1}}","title":"Output (interleaved ranking):"},{"location":"api-reference/mca/#explanation_1","text":"header : header containing meta information about the returned result body : body with rank positions, identifiers, and type of the corresponding system docid : the document identifier type : type of system can be either BASE or EXP container : dictionary with names of the experimental system and optional baseline system page : the number of the start page q : the query string rid : the ranking identifier rpp : the number of results per page hits : the number of total hits sid : the session identifier","title":"Explanation:"},{"location":"api-reference/mca/#output-non-interleaved-ranking","text":"{'body': {'1': {'docid': 'M27622217', 'type': 'EXP'}, '2': {'docid': 'M27251231', 'type': 'EXP'}, '3': {'docid': 'M27692969', 'type': 'EXP'}, '4': {'docid': 'M26350569', 'type': 'EXP'}, '5': {'docid': 'M26715777', 'type': 'EXP'}, '6': {'docid': 'M26650940', 'type': 'EXP'}, '7': {'docid': 'M27098271', 'type': 'EXP'}, '8': {'docid': 'M28381438', 'type': 'EXP'}, '9': {'docid': 'M27763523', 'type': 'EXP'}, '10': {'docid': 'M27157745', 'type': 'EXP'}, '11': {'docid': 'M28066266', 'type': 'EXP'}, '12': {'docid': 'M26874427', 'type': 'EXP'}, '13': {'docid': 'M27133457', 'type': 'EXP'}, '14': {'docid': 'M26791355', 'type': 'EXP'}, '15': {'docid': 'M27157753', 'type': 'EXP'}, '16': {'docid': 'M27167258', 'type': 'EXP'}, '17': {'docid': 'M27524068', 'type': 'EXP'}, '18': {'docid': 'M26824628', 'type': 'EXP'}, '19': {'docid': 'M26967532', 'type': 'EXP'}}, 'header': {'container': {'exp': 'rank_elastic'}, 'page': 0, 'q': 'vaccine', 'rid': 1, 'rpp': 20, 'hits': 12312, 'sid': 1}}","title":"Output (non-interleaved ranking):"},{"location":"api-reference/mca/#explanation_2","text":"See above.","title":"Explanation:"},{"location":"api-reference/mca/#feedback","text":"","title":"Feedback"},{"location":"api-reference/mca/#rest-endpoint_1","text":"POST /stella/api/v1/ranking/rid=<int:rid>/feedback","title":"REST endpoint:"},{"location":"api-reference/mca/#explanation_3","text":"sid : the session identifier rid : the ranking identifier","title":"Explanation:"},{"location":"api-reference/mca/#payload","text":"{'clicks': {'1': {'clicked': False, 'date': None, 'docid': 'M26923455', 'type': 'EXP'}, '2': {'clicked': False, 'date': None, 'docid': 'M25600519', 'type': 'EXP'}, '3': {'clicked': True, 'date': '2020-07-29 16:06:51', 'docid': 'M27515393', 'type': 'EXP'}, '4': {'clicked': False, 'date': None, 'docid': 'M27572122', 'type': 'EXP'}, '5': {'clicked': False, 'date': None, 'docid': 'M27357208', 'type': 'EXP'}, '6': {'clicked': True, 'date': '2020-07-29 16:06:51', 'docid': 'M27309042', 'type': 'EXP'}, '7': {'clicked': False, 'date': None, 'docid': 'M27237391', 'type': 'EXP'}, '8': {'clicked': False, 'date': None, 'docid': 'M27279275', 'type': 'EXP'}, '9': {'clicked': False, 'date': None, 'docid': 'M26813237', 'type': 'EXP'} '10': {'clicked': False, 'date': None, 'docid': 'M27049797', 'type': 'EXP'}, '11': {'clicked': False, 'date': None, 'docid': 'M27531820', 'type': 'EXP'}, '12': {'clicked': False, 'date': None, 'docid': 'M27338346', 'type': 'EXP'}, '13': {'clicked': False, 'date': None, 'docid': 'M27999240', 'type': 'EXP'}, '14': {'clicked': False, 'date': None, 'docid': 'M26613600', 'type': 'EXP'}, '15': {'clicked': False, 'date': None, 'docid': 'M27356552', 'type': 'EXP'}, '16': {'clicked': False, 'date': None, 'docid': 'M27783754', 'type': 'EXP'}, '17': {'clicked': False, 'date': None, 'docid': 'M27278100', 'type': 'EXP'}, '18': {'clicked': False, 'date': None, 'docid': 'M27531823', 'type': 'EXP'}, '19': {'clicked': False, 'date': None, 'docid': 'M26860287', 'type': 'EXP'}}, 'end': '2020-07-29 16:12:53', 'interleave': True, 'start': '2020-07-29 16:06:51'}","title":"Payload:"},{"location":"api-reference/mca/#explanation_4","text":"start : time of session start, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' interleave : boolean value indicating if the result list has been interleaved end : time of session end, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' clicks : dicitionary containing document identifiers and their corresponding clicks clicked : boolean values indicating whether document has been clicked or not date : time when click happend, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' docid : the document identifier system : string value indicating if the corresponding system is baseline ( BASE ) or experimental ( EXP )","title":"Explanation:"},{"location":"api-reference/mca/#recommendations","text":"","title":"Recommendations"},{"location":"api-reference/mca/#rest-endpoint_2","text":"","title":"REST endpoint:"},{"location":"api-reference/mca/#datasets","text":"GET /stella/api/v1/recommendation/datasets?itemid=<string:itemid>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container>","title":"Datasets"},{"location":"api-reference/mca/#explanation_5","text":"itemid : the target item of the recommendations page : the number of the start page (optional) rpp : the number of results per page (optional) sid : the session identifier (optional) container : name of the container that contains either the baseline or one of the experimental systems (optional)","title":"Explanation:"},{"location":"api-reference/mca/#publications","text":"GET /stella/api/v1/recommendation/publications?itemid=<string:itemid>&page=<int:page>&rpp=<int:rpp>&sid=<int:sid>&container=<string:container>","title":"Publications"},{"location":"api-reference/mca/#explanation_6","text":"See above.","title":"Explanation:"},{"location":"api-reference/mca/#output-interleaved-recommendation","text":"{'body': {'1': {'docid': 'M27388739', 'type': 'BASE'}, '2': {'docid': 'M27338344', 'type': 'EXP'}, '3': {'docid': 'M26207529', 'type': 'EXP'}, '4': {'docid': 'M27216378', 'type': 'BASE'}, '5': {'docid': 'M26938486', 'type': 'BASE'}, '6': {'docid': 'M26612070', 'type': 'EXP'}, '7': {'docid': 'M27641359', 'type': 'BASE'}, '8': {'docid': 'M27567522', 'type': 'EXP'}, '9': {'docid': 'M27897418', 'type': 'BASE'}}, 'header': {'container': {'base': 'recom_tfidf_base', 'exp': 'recom_tfidf'}, 'itemid': 'M26923455', 'page': 0, 'rid': 4, 'rpp': 10, 'sid': 2, 'type': 'PUB'}}","title":"Output (interleaved recommendation):"},{"location":"api-reference/mca/#explanation_7","text":"header : header containing meta information about the returned result body : body with positions, identifiers, and type of the corresponding system docid : the document identifier type : type of system can be either BASE or EXP container : dictionary with names of the experimental system and optional baseline system itemid : the target item of the recommendations page : the number of the start page rid : the recommendation identifier rpp : the number of results per page sid : the session identifier type : type of system can be either BASE or EXP","title":"Explanation:"},{"location":"api-reference/mca/#output-non-interleaved-recommendation","text":"{'body': {'1': {'docid': 'M27038470', 'type': 'EXP'}, '2': {'docid': 'M27342969', 'type': 'EXP'}, '3': {'docid': 'M26774951', 'type': 'EXP'}, '4': {'docid': 'M27912945', 'type': 'EXP'}, '5': {'docid': 'M26797943', 'type': 'EXP'}, '6': {'docid': 'M25359468', 'type': 'EXP'}, '7': {'docid': 'M26969740', 'type': 'EXP'}, '8': {'docid': 'M27613427', 'type': 'EXP'}, '9': {'docid': 'M27976545', 'type': 'EXP'}}, 'header': {'container': {'exp': 'recom_tfidf'}, 'itemid': 'M26923455', 'page': 0, 'rid': 2, 'rpp': 10, 'sid': 2, 'type': 'PUB'}}","title":"Output (non-interleaved recommendation):"},{"location":"api-reference/mca/#explanation_8","text":"See above.","title":"Explanation:"},{"location":"api-reference/mca/#feedback_1","text":"","title":"Feedback"},{"location":"api-reference/mca/#rest-endpoint_3","text":"POST /stella/api/v1/recommendation/rid=rid=<int:rid>/feedback","title":"REST endpoint:"},{"location":"api-reference/mca/#explanation_9","text":"rid : the recommendation identifier {'clicks': {'1': {'clicked': False, 'date': None, 'docid': 'M27160449', 'type': 'EXP'}, '2': {'clicked': False, 'date': None, 'docid': 'M27888935', 'type': 'BASE'}, '3': {'clicked': False, 'date': None, 'docid': 'M27088628', 'type': 'EXP'}, '4': {'clicked': False, 'date': None, 'docid': 'M27064543', 'type': 'BASE'}, '5': {'clicked': False, 'date': None, 'docid': 'M27717979', 'type': 'EXP'}, '6': {'clicked': True, 'date': '2020-07-29 17:11:18', 'docid': 'M27077760', 'type': 'BASE'}, '7': {'clicked': False, 'date': None, 'docid': 'M27638054', 'type': 'BASE'}, '8': {'clicked': False, 'date': None, 'docid': 'M26360828', 'type': 'EXP'}, '9': {'clicked': False, 'date': None, 'docid': 'M27554937', 'type': 'BASE'}}, 'end': '2020-07-29 17:59:24', 'interleave': True, 'start': '2020-07-29 17:11:18'}","title":"Explanation:"},{"location":"api-reference/mca/#explanation_10","text":"start : time of session start, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' interleave : boolean value indicating if the result list has been interleaved end : time of session end, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' clicks : dicitionary containing document identifiers and their corresponding clicks clicked : boolean values indicating whether document has been clicked or not date : time when click happend, has to be provided as datetime-formatted string like 'YYYY-MM-DD HH:MM:SS' docid : the document identifier system : string value indicating if the corresponding system is baseline ( BASE ) or experimental ( EXP )","title":"Explanation:"},{"location":"api-reference/mca/#indexing","text":"GET /stella/api/v1/index/bulk","title":"Indexing"},{"location":"api-reference/mca/#explanation_11","text":"Start indexing all containers in parallel. GET /stella/api/v1/index/<string:container_name>","title":"Explanation:"},{"location":"api-reference/mca/#explanation_12","text":"container_name : Name of the specific container to be indexed.","title":"Explanation:"},{"location":"api-reference/mca/#exit-sessions","text":"GET /stella/api/v1/sessions/<int:sid>/exit","title":"Exit sessions"},{"location":"api-reference/mca/#explanation_13","text":"sid : Identifier of the session to be exited.","title":"Explanation:"},{"location":"api-reference/micro-service/","text":"Ranking REST endpoint: GET container_name/ranking?query=<string:qstr>&page=<int:pnum>&rpp=<int:rppnum> Explanation: container_name : name of the container that contains either the baseline or one of the experimental systems query : the query string page : the number of the start page rpp : the number of results per page Output: {'itemlist': ['M26721328', 'M26923455', 'M25600519', 'M27515393', 'M27572122', 'M27357208', 'M27309042', 'M27237391', 'M27279275', 'M26813237', 'M27049797', 'M27531820', 'M27338346', 'M27999240', 'M26613600', 'M27356552', 'M27783754', 'M27278100', 'M27531823', 'M26860287'], 'num_found': 20, 'page': 0, 'query': 'vaccine', 'rpp': 20} Explanation: itemlist : a list containing the document identifiers num_found : the total number of documents found for the given query page : the number of the start page query : the query string rpp : the number of results per page Recommendation REST endpoint: GET container_name/recommendation/datasets?itemid=<string:itemidstr>&page=<int:pnum>&rpp=<int:rppnum> GET container_name/recommendation/publications?itemid=<string:itemidstr>&page=<int:pnum>&rpp=<int:rppnum> Explanation: container_name : name of the container that contains either the baseline or one of the experimental systems datasets/publications : specify if datasets of publications should be recommended itemid : the target item of the recommendations page : the number of the start page rpp : the number of results per page Output: {'itemid': 'M26923455', 'itemlist': ['M27852061', 'M26673108', 'M27894536', 'M27293030', 'M27133708', 'M26841192', 'M27144310', 'M27353833', 'M27287107', 'M27658597'], 'num_found': 10, 'page': 0, 'rpp': 10} Explanation: itemid : the target item of the recommendations itemlist : a list containing the document identifiers num_found : the total number of documents found for the given query page : the number of the start page rpp : the number of results per page","title":"Micro-service"},{"location":"api-reference/micro-service/#ranking","text":"","title":"Ranking"},{"location":"api-reference/micro-service/#rest-endpoint","text":"GET container_name/ranking?query=<string:qstr>&page=<int:pnum>&rpp=<int:rppnum>","title":"REST endpoint:"},{"location":"api-reference/micro-service/#explanation","text":"container_name : name of the container that contains either the baseline or one of the experimental systems query : the query string page : the number of the start page rpp : the number of results per page","title":"Explanation:"},{"location":"api-reference/micro-service/#output","text":"{'itemlist': ['M26721328', 'M26923455', 'M25600519', 'M27515393', 'M27572122', 'M27357208', 'M27309042', 'M27237391', 'M27279275', 'M26813237', 'M27049797', 'M27531820', 'M27338346', 'M27999240', 'M26613600', 'M27356552', 'M27783754', 'M27278100', 'M27531823', 'M26860287'], 'num_found': 20, 'page': 0, 'query': 'vaccine', 'rpp': 20}","title":"Output:"},{"location":"api-reference/micro-service/#explanation_1","text":"itemlist : a list containing the document identifiers num_found : the total number of documents found for the given query page : the number of the start page query : the query string rpp : the number of results per page","title":"Explanation:"},{"location":"api-reference/micro-service/#recommendation","text":"","title":"Recommendation"},{"location":"api-reference/micro-service/#rest-endpoint_1","text":"GET container_name/recommendation/datasets?itemid=<string:itemidstr>&page=<int:pnum>&rpp=<int:rppnum> GET container_name/recommendation/publications?itemid=<string:itemidstr>&page=<int:pnum>&rpp=<int:rppnum>","title":"REST endpoint:"},{"location":"api-reference/micro-service/#explanation_2","text":"container_name : name of the container that contains either the baseline or one of the experimental systems datasets/publications : specify if datasets of publications should be recommended itemid : the target item of the recommendations page : the number of the start page rpp : the number of results per page","title":"Explanation:"},{"location":"api-reference/micro-service/#output_1","text":"{'itemid': 'M26923455', 'itemlist': ['M27852061', 'M26673108', 'M27894536', 'M27293030', 'M27133708', 'M26841192', 'M27144310', 'M27353833', 'M27287107', 'M27658597'], 'num_found': 10, 'page': 0, 'rpp': 10}","title":"Output:"},{"location":"api-reference/micro-service/#explanation_3","text":"itemid : the target item of the recommendations itemlist : a list containing the document identifiers num_found : the total number of documents found for the given query page : the number of the start page rpp : the number of results per page","title":"Explanation:"},{"location":"api-reference/server/","text":"Feedback GET details of all feedbacks (see also util/GET_feedbacks.py ): /feedbacks GET details of feedback with id (see also util/GET_feedback.py ): /feedbacks/<int:id> POST new feedback for session with id (see also util/POST_feedback.py ): /sessions/<int:id>/feedbacks The payload should be provided as follows: { \"start\": \"2019-11-04 00:06:23\", \"end\": \"2019-11-04 00:10:38\", \"interleave\": \"True\", \"clicks\": [ {\"1\": {\"doc_id\": \"doc1\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"2\": {\"doc_id\": \"doc11\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:08:15\", \"system\": \"BASE\"}}, {\"3\": {\"doc_id\": \"doc2\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"4\": {\"doc_id\": \"doc12\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:06:23\", \"system\": \"BASE\"}}, {\"5\": {\"doc_id\": \"doc3\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"6\": {\"doc_id\": \"doc13\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"7\": {\"doc_id\": \"doc4\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"8\": {\"doc_id\": \"doc14\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"9\": {\"doc_id\": \"doc5\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"10\": {\"doc_id\": \"doc15\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}} ] } PUT details for feedback with id (see also util/PUT_feedback.py ): /feedbacks/<int:id>' The payload should be provided as follows: { \"start\": \"2019-11-04 00:06:23\", \"end\": \"2019-11-04 00:10:38\", \"interleave\": \"True\", \"clicks\": [ {\"1\": {\"doc_id\": \"doc1\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"2\": {\"doc_id\": \"doc11\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:08:15\", \"system\": \"BASE\"}}, {\"3\": {\"doc_id\": \"doc2\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"4\": {\"doc_id\": \"doc12\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:06:23\", \"system\": \"BASE\"}}, {\"5\": {\"doc_id\": \"doc3\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"6\": {\"doc_id\": \"doc13\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"7\": {\"doc_id\": \"doc4\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"8\": {\"doc_id\": \"doc14\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"9\": {\"doc_id\": \"doc5\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"10\": {\"doc_id\": \"doc15\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}} ] } Participant GET all systems of participant with id (see also util/GET_systems_of_participant.py ): /participants/<int:id>/systems GET all sessions of participant with id (see also util/GET_sessions_of_participant.py ): /participants/<int:id>/sessions Ranking GET details of ranking with id (see also util/GET_ranking.py ): /rankings/<int:id> GET a list of all ranking id s (see also util/GET_rankings.py ): /rankings POST ranking for feedback with id (see also util/POST_rankings.py ): /feedbacks/<int:id>/rankings The payload should be provided as follows: { \"q\": \"this is the query text\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } PUT ranking with id (see also util/PUT_ranking.py ): /rankings/<int:id> The payload should be provided as follows: { \"q\": \"this is the query text\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } Recommendation GET details of recommendation with id (see also util/GET_ranking.py that works analogously): /recommendations/<int:id> GET a list of all recommendation id s (see also util/GET_rankings.py that works analogously): /recommendations POST recommendation for feedback with id (see also util/POST_rankings.py that works analogously): /feedbacks/<int:id>/recommendations The payload should be provided as follows: { \"q\": \"docid\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } PUT recommendation with id (see also util/PUT_ranking.py that works analogously): /recommendations/<int:id> The payload should be provided as follows: { \"q\": \"docid\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } Session GET session with id (see also util/GET_session.py ): /sessions/<int:id> GET feedback from session with id (see also util/GET_feedbacks_of_session.py ): /sessions/<int:id>/feedbacks GET systems used in session with id : /sessions/<int:id>/systems Site GET site details, e.g. id , with the help of the name (see also util/GET_systems_at_site.py ): /sites/<string:name> GET sessions at site with id (see also util/GET_session_at_site.py ): /sites/<int:id>/sessions GET systems deployed at site with id (see also util/GET_systems_at_site.py ): /sites/<int:id>/systems POST new session at site with id (see also util/POST_sessions.py ): /sites/<int:id>/sessions The payload should be provided as follows: { \"site_user\": \"123.123.123.123\", \"start\": \"2020-02-20 20:02:20\", \"end\": \"2020-02-20 20:02:20\", \"system_ranking\": \"rank_exp_a\", \"system_recommendation\": \"rec_exp_a\" }","title":"Central server"},{"location":"api-reference/server/#feedback","text":"GET details of all feedbacks (see also util/GET_feedbacks.py ): /feedbacks GET details of feedback with id (see also util/GET_feedback.py ): /feedbacks/<int:id> POST new feedback for session with id (see also util/POST_feedback.py ): /sessions/<int:id>/feedbacks The payload should be provided as follows: { \"start\": \"2019-11-04 00:06:23\", \"end\": \"2019-11-04 00:10:38\", \"interleave\": \"True\", \"clicks\": [ {\"1\": {\"doc_id\": \"doc1\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"2\": {\"doc_id\": \"doc11\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:08:15\", \"system\": \"BASE\"}}, {\"3\": {\"doc_id\": \"doc2\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"4\": {\"doc_id\": \"doc12\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:06:23\", \"system\": \"BASE\"}}, {\"5\": {\"doc_id\": \"doc3\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"6\": {\"doc_id\": \"doc13\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"7\": {\"doc_id\": \"doc4\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"8\": {\"doc_id\": \"doc14\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"9\": {\"doc_id\": \"doc5\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"10\": {\"doc_id\": \"doc15\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}} ] } PUT details for feedback with id (see also util/PUT_feedback.py ): /feedbacks/<int:id>' The payload should be provided as follows: { \"start\": \"2019-11-04 00:06:23\", \"end\": \"2019-11-04 00:10:38\", \"interleave\": \"True\", \"clicks\": [ {\"1\": {\"doc_id\": \"doc1\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"2\": {\"doc_id\": \"doc11\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:08:15\", \"system\": \"BASE\"}}, {\"3\": {\"doc_id\": \"doc2\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"4\": {\"doc_id\": \"doc12\", \"clicked\": \"True\", \"date\": \"2019-11-04 00:06:23\", \"system\": \"BASE\"}}, {\"5\": {\"doc_id\": \"doc3\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"6\": {\"doc_id\": \"doc13\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"7\": {\"doc_id\": \"doc4\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"8\": {\"doc_id\": \"doc14\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}}, {\"9\": {\"doc_id\": \"doc5\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"EXP\"}}, {\"10\": {\"doc_id\": \"doc15\", \"clicked\": \"False\", \"date\": \"None\", \"system\": \"BASE\"}} ] }","title":"Feedback"},{"location":"api-reference/server/#participant","text":"GET all systems of participant with id (see also util/GET_systems_of_participant.py ): /participants/<int:id>/systems GET all sessions of participant with id (see also util/GET_sessions_of_participant.py ): /participants/<int:id>/sessions","title":"Participant"},{"location":"api-reference/server/#ranking","text":"GET details of ranking with id (see also util/GET_ranking.py ): /rankings/<int:id> GET a list of all ranking id s (see also util/GET_rankings.py ): /rankings POST ranking for feedback with id (see also util/POST_rankings.py ): /feedbacks/<int:id>/rankings The payload should be provided as follows: { \"q\": \"this is the query text\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } PUT ranking with id (see also util/PUT_ranking.py ): /rankings/<int:id> The payload should be provided as follows: { \"q\": \"this is the query text\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] }","title":"Ranking"},{"location":"api-reference/server/#recommendation","text":"GET details of recommendation with id (see also util/GET_ranking.py that works analogously): /recommendations/<int:id> GET a list of all recommendation id s (see also util/GET_rankings.py that works analogously): /recommendations POST recommendation for feedback with id (see also util/POST_rankings.py that works analogously): /feedbacks/<int:id>/recommendations The payload should be provided as follows: { \"q\": \"docid\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] } PUT recommendation with id (see also util/PUT_ranking.py that works analogously): /recommendations/<int:id> The payload should be provided as follows: { \"q\": \"docid\", \"q_date\": \"2019-11-04 00:04:00\", \"q_time\": 325, \"num_found\": 100, \"page\": 1, \"rpp\": 10, \"items\": [ {\"1\": \"doc1\", \"2\": \"doc2\", \"3\": \"doc3\", \"4\": \"doc4\", \"5\": \"doc5\", \"6\": \"doc6\", \"7\": \"doc7\", \"8\": \"doc8\", \"9\": \"doc9\", \"10\": \"doc10\"} ] }","title":"Recommendation"},{"location":"api-reference/server/#session","text":"GET session with id (see also util/GET_session.py ): /sessions/<int:id> GET feedback from session with id (see also util/GET_feedbacks_of_session.py ): /sessions/<int:id>/feedbacks GET systems used in session with id : /sessions/<int:id>/systems","title":"Session"},{"location":"api-reference/server/#site","text":"GET site details, e.g. id , with the help of the name (see also util/GET_systems_at_site.py ): /sites/<string:name> GET sessions at site with id (see also util/GET_session_at_site.py ): /sites/<int:id>/sessions GET systems deployed at site with id (see also util/GET_systems_at_site.py ): /sites/<int:id>/systems POST new session at site with id (see also util/POST_sessions.py ): /sites/<int:id>/sessions The payload should be provided as follows: { \"site_user\": \"123.123.123.123\", \"start\": \"2020-02-20 20:02:20\", \"end\": \"2020-02-20 20:02:20\", \"system_ranking\": \"rank_exp_a\", \"system_recommendation\": \"rec_exp_a\" }","title":"Site"},{"location":"develop/env-mca/","text":"Environment variable Meaning RANKSYS_LIST RANKSYS_PRECOM_LIST RANKSYS_BASE STELLA_SERVER_ADDRESS STELLA_SERVER_USER STELLA_SERVER_PASS STELLA_SERVER_USERNAME INTERLEAVE You can choose to interleave the results with the baseline system via INTERLEAVE . Per default interleaving is activated ( INTERLEAVE=True ) BULK_INDEX If all systems should start the indexing when launching the app leave BULK_INDEX=True . If BULK_INDEX=False , you can visit <ip-of-stella-app>/ and index the systems individually or by calling the corresponding REST-endpoints. DELETE_SENT_SESSION If DELETE_SENT_SESSION=True , all sessions will removed after they have been sent to the stella-server . INTERVAL_DB_CHECK This environment variables controls the time interval for checking the database for finished sessions. Time is specified in seconds, i.e. INTERVAL_DB_CHECK=3 will check every 3 seconds if there are new sessions that can be sent to the stella-server . SESSION_EXPIRATION This environment variables controls the time interval after the state of a sessions will automatically be set to \"finished\". Time is specified in seconds, i.e. SESSION_EXPIRATION=6 will make a session expire after 6 seconds.","title":"Multi-container application"},{"location":"develop/env-server/","text":"Environment variable Meaning FLASK_CONFIG POSTGRES_USER POSTGRES_PW POSTGRES_DB SECRET_KEY AUTOMATOR_GH_KEY ADMIN_MAIL ADMIN_PASS GESIS_MAIL GESIS_PASS LIVIVO_MAIL LIVIVO_PASS PARTA_MAIL PARTA_PASS PARTB_MAIL PARTB_PASS POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB","title":"Central server"},{"location":"guides/single-machine/","text":"Setup guide (single server instance) 0. Overview This guide is intended for setting up an instance of the stella-app and the stella-server on a single machine. Both applications have to be in the same Docker network. Only then, the stella-app 's HTTP requests can reach the REST-API of the stella-server . These instructions will guide you through the following steps: Clone the repositories ( stella-server , stella-app ) Download the datasets (extracting and placing them in the correct directory) Configure the stella-server and the stella-app Build both Docker applications Sanity checks By the end, you should have both applications running and can simulate interactions with the stella-app, which in turn sends the feedback to the stella-server. By logging into the stella-server, you should be able to see plots in the dashboard and JSON-formatted downloads of the feedback data should be possible. Prerequisites: :warning: Make sure docker , docker-compose and the docker-sdk [1] are installed and executable! :warning: [1] The docker-sdk is actually only required for developing micro-services with experimental systems. Start with fresh copies of the repositories and make sure previous builds of the Docker images are removed. It may not be enough to stop the containers. In some cases, previous image builds (which are not up-to-date) might be re-used. 1. Clone the repositories Clone the repository of the stella-server: git clone https://github.com/stella-project/stella-server Clone the repository of the stella-app: git clone https://github.com/stella-project/stella-app 2. Download the datasets Download the datasets that are provided by LIVIVO and GESIS from the publicly shared Sciebo folder . More specifically, you should download the two folders gesis-search/ and livivo/ and place the uncompressed folders in the data/ directory of the stella-app. 3. Configure the stella-server and the stella-app Both applications have a config.py file. Leaving the configurations untouched after the repositories have been cloned is fine - there is actually no need to change anything here. Those who want to directly dive in, can skip the following lines and can continue with the Docker builds. For the curious minds, there are seperate pages for the stella-server 's config.py and the stella-app 's config.py . There you will find detailed descriptions of each configuration. For now, it is interesting to have a look at the following fields of stella-app 's config.py . Check if conf['app']['DEBUG'] = False . Check if conf['app']['BULK_INDEX'] = True . When starting the stella-app all experimental will start to index the data in parallel. There is no need to trigger any indexing process \"manually\". Check if conf[\"app\"][\"STELLA_SERVER_API\"] = \"http://nginx/stella/api/v1\" . This is the address of the stella-server in the Docker network. Only if both applications are in the same Docker network, they can communicate. Check the credentials that are used by the stella-app : conf[\"app\"][\"STELLA_SERVER_USER\"] = \"gesis@stella.org\" conf[\"app\"][\"STELLA_SERVER_PASS\"] = \"pass\" conf[\"app\"][\"STELLA_SERVER_USERNAME\"] = \"GESIS\" Per default, GESIS is set as the user of the stella-app , but you can change them to LIVIVO's with the help of the credentials given below. 4. Build both Docker applications The stella-server has to be built first! Its default network will be used as our Docker network. Build the stella-server with: cd stella-server/ docker-compose up -d Afterwards, the stella-app can be built. In the repository you will find two .yml -files. As part of this guide, you have to use the docker-compose.yml file . It will add the stella-app to the Docker network of the stella-server . You can ignore the local.yml - this one is intended for a setup independent of the stella-server . Build the stella-app with: cd stella-app/ docker-compose up -d This is the right moment to get a cup of coffee or any other beverage of your choice. It takes a while to build all the Docker images (all dependencies have to be retrieved from the web) and once the images are running in containers, the indexing will take some time. Please note that at the current stage, the stella-app has already too many experimental systems, so not all systems can start the indexing in parallel when starting the app on my laptop (16GB RAM, i7 4Cores@1.9GHz). Even though the stella-app forces all systems to build the index at once, some experimental systems will probably remain without an index, after the app has been started on lower-end devices. A current workaround for this problem is to trigger the indexing for specific experimental systems that do not have an index. This can either be done by the corresponding REST-endpoint ( /stella/api/v1/index/<string:container_name> ) or by visiting the dashboard of the stella-app and using the index button. 5. Sanity checks Once everything has been set up. We can check a few things first. 1st sanity check: visiting the dashboard If you did not change anything in the configurations, the stella-server should be visitable at http://0.0.0.0:80 . Log in with one of the provided credentials below. You should able to see a list with pre-registered system at http://0.0.0.0:80/systems and can visit an \"empty\" dashboard at http://0.0.0.0:80/dashboard . In the following, we will fill up the database of the stella-server with some feedback data. 2nd sanity check: Simulating feedback data and posting it via the REST endpoints of the stella-server In this step, we will simulate interactions and use the REST endpoints that are actually used by the stella-app later on. It can be seen as a pre-assessment, if the stella-server behaves as intended. Use the simulate.py script and make sure, the address of the stella-server is set correctly in the script. Once executed, you can revisit the dashboard and should be provided with some visualizations. Likewise, JSON-formatted feedback data should be exportable from the systems' overview. 3rd sanity check: Simulating feedback data and posting it via the REST endpoints of the stella-app In the previous step, we were using the REST endpoints that are intended to be used by the stella-app . In this step, we will also simulate data and send it to the stella-app , which in turn, will send it to the stella-server . Use the simulate.py script in the repository of the stella-app (make sure the address of the stella-app is correct). Revisit the stella-server and have a look at the dashboard. Pre-registered users of the stella-server Participants username email password participant_a participant_a@stella.org pass participant_b participant_b@stella.org pass Sites username email password GESIS gesis@stella.org pass LIVIVO livivo@stella.org pass Administrators username email password stella-admin admin@stella.org pass","title":"Setup guide (single server instance)"},{"location":"guides/single-machine/#setup-guide-single-server-instance","text":"","title":"Setup guide (single server instance)"},{"location":"guides/single-machine/#0-overview","text":"This guide is intended for setting up an instance of the stella-app and the stella-server on a single machine. Both applications have to be in the same Docker network. Only then, the stella-app 's HTTP requests can reach the REST-API of the stella-server . These instructions will guide you through the following steps: Clone the repositories ( stella-server , stella-app ) Download the datasets (extracting and placing them in the correct directory) Configure the stella-server and the stella-app Build both Docker applications Sanity checks By the end, you should have both applications running and can simulate interactions with the stella-app, which in turn sends the feedback to the stella-server. By logging into the stella-server, you should be able to see plots in the dashboard and JSON-formatted downloads of the feedback data should be possible.","title":"0. Overview"},{"location":"guides/single-machine/#prerequisites","text":":warning: Make sure docker , docker-compose and the docker-sdk [1] are installed and executable! :warning: [1] The docker-sdk is actually only required for developing micro-services with experimental systems. Start with fresh copies of the repositories and make sure previous builds of the Docker images are removed. It may not be enough to stop the containers. In some cases, previous image builds (which are not up-to-date) might be re-used.","title":"Prerequisites:"},{"location":"guides/single-machine/#1-clone-the-repositories","text":"Clone the repository of the stella-server: git clone https://github.com/stella-project/stella-server Clone the repository of the stella-app: git clone https://github.com/stella-project/stella-app","title":"1. Clone the repositories"},{"location":"guides/single-machine/#2-download-the-datasets","text":"Download the datasets that are provided by LIVIVO and GESIS from the publicly shared Sciebo folder . More specifically, you should download the two folders gesis-search/ and livivo/ and place the uncompressed folders in the data/ directory of the stella-app.","title":"2. Download the datasets"},{"location":"guides/single-machine/#3-configure-the-stella-server-and-the-stella-app","text":"Both applications have a config.py file. Leaving the configurations untouched after the repositories have been cloned is fine - there is actually no need to change anything here. Those who want to directly dive in, can skip the following lines and can continue with the Docker builds. For the curious minds, there are seperate pages for the stella-server 's config.py and the stella-app 's config.py . There you will find detailed descriptions of each configuration. For now, it is interesting to have a look at the following fields of stella-app 's config.py . Check if conf['app']['DEBUG'] = False . Check if conf['app']['BULK_INDEX'] = True . When starting the stella-app all experimental will start to index the data in parallel. There is no need to trigger any indexing process \"manually\". Check if conf[\"app\"][\"STELLA_SERVER_API\"] = \"http://nginx/stella/api/v1\" . This is the address of the stella-server in the Docker network. Only if both applications are in the same Docker network, they can communicate. Check the credentials that are used by the stella-app : conf[\"app\"][\"STELLA_SERVER_USER\"] = \"gesis@stella.org\" conf[\"app\"][\"STELLA_SERVER_PASS\"] = \"pass\" conf[\"app\"][\"STELLA_SERVER_USERNAME\"] = \"GESIS\" Per default, GESIS is set as the user of the stella-app , but you can change them to LIVIVO's with the help of the credentials given below.","title":"3. Configure the stella-server and the stella-app"},{"location":"guides/single-machine/#4-build-both-docker-applications","text":"The stella-server has to be built first! Its default network will be used as our Docker network. Build the stella-server with: cd stella-server/ docker-compose up -d Afterwards, the stella-app can be built. In the repository you will find two .yml -files. As part of this guide, you have to use the docker-compose.yml file . It will add the stella-app to the Docker network of the stella-server . You can ignore the local.yml - this one is intended for a setup independent of the stella-server . Build the stella-app with: cd stella-app/ docker-compose up -d This is the right moment to get a cup of coffee or any other beverage of your choice. It takes a while to build all the Docker images (all dependencies have to be retrieved from the web) and once the images are running in containers, the indexing will take some time. Please note that at the current stage, the stella-app has already too many experimental systems, so not all systems can start the indexing in parallel when starting the app on my laptop (16GB RAM, i7 4Cores@1.9GHz). Even though the stella-app forces all systems to build the index at once, some experimental systems will probably remain without an index, after the app has been started on lower-end devices. A current workaround for this problem is to trigger the indexing for specific experimental systems that do not have an index. This can either be done by the corresponding REST-endpoint ( /stella/api/v1/index/<string:container_name> ) or by visiting the dashboard of the stella-app and using the index button.","title":"4. Build both Docker applications"},{"location":"guides/single-machine/#5-sanity-checks","text":"Once everything has been set up. We can check a few things first.","title":"5. Sanity checks"},{"location":"guides/single-machine/#1st-sanity-check-visiting-the-dashboard","text":"If you did not change anything in the configurations, the stella-server should be visitable at http://0.0.0.0:80 . Log in with one of the provided credentials below. You should able to see a list with pre-registered system at http://0.0.0.0:80/systems and can visit an \"empty\" dashboard at http://0.0.0.0:80/dashboard . In the following, we will fill up the database of the stella-server with some feedback data.","title":"1st sanity check: visiting the dashboard"},{"location":"guides/single-machine/#2nd-sanity-check-simulating-feedback-data-and-posting-it-via-the-rest-endpoints-of-the-stella-server","text":"In this step, we will simulate interactions and use the REST endpoints that are actually used by the stella-app later on. It can be seen as a pre-assessment, if the stella-server behaves as intended. Use the simulate.py script and make sure, the address of the stella-server is set correctly in the script. Once executed, you can revisit the dashboard and should be provided with some visualizations. Likewise, JSON-formatted feedback data should be exportable from the systems' overview.","title":"2nd sanity check: Simulating feedback data and posting it via the REST endpoints of the stella-server"},{"location":"guides/single-machine/#3rd-sanity-check-simulating-feedback-data-and-posting-it-via-the-rest-endpoints-of-the-stella-app","text":"In the previous step, we were using the REST endpoints that are intended to be used by the stella-app . In this step, we will also simulate data and send it to the stella-app , which in turn, will send it to the stella-server . Use the simulate.py script in the repository of the stella-app (make sure the address of the stella-app is correct). Revisit the stella-server and have a look at the dashboard.","title":"3rd sanity check: Simulating feedback data and posting it via the REST endpoints of the stella-app"},{"location":"guides/single-machine/#pre-registered-users-of-the-stella-server","text":"","title":"Pre-registered users of the stella-server"},{"location":"guides/single-machine/#participants","text":"username email password participant_a participant_a@stella.org pass participant_b participant_b@stella.org pass","title":"Participants"},{"location":"guides/single-machine/#sites","text":"username email password GESIS gesis@stella.org pass LIVIVO livivo@stella.org pass","title":"Sites"},{"location":"guides/single-machine/#administrators","text":"username email password stella-admin admin@stella.org pass","title":"Administrators"}]}